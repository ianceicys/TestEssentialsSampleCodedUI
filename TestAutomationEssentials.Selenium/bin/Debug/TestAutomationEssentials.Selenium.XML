<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestAutomationEssentials.Selenium</name>
    </assembly>
    <members>
        <member name="T:TestAutomationEssentials.Selenium.Browser">
            <summary>
            Represents an instance of a browser
            </summary>
        </member>
        <member name="F:TestAutomationEssentials.Selenium.Browser.WebDriver">
            <summary>
            Provides access to the underlying <see cref="T:OpenQA.Selenium.IWebDriver"/>
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.Browser.#ctor(System.String,OpenQA.Selenium.IWebDriver)">
            <summary>
            Initializes the instance of the object using the specified description and <see cref="T:OpenQA.Selenium.IWebDriver"/>
            </summary>
            <param name="description">The description of the browser. This is used for logging</param>
            <param name="webDriver">The WebDriver instance that is used to communicate with the browser</param>
            <exception cref="T:System.ArgumentNullException">one of the arguments are null</exception>
        </member>
        <member name="P:TestAutomationEssentials.Selenium.Browser.MainWindow">
            <summary>
            Returns the browser window that was activew when the browser was opened
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.Browser.NavigateToUrl(System.String)">
            <summary>
            Navigates the main window to the specified url
            </summary>
            <param name="url">The url to navigate to</param>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.Browser.GetWebDriver">
            <summary>
            Returns the underlying IWebDriver object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.Browser.Dispose">
            <summary>
            Closes the Selenium driver
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.Browser.OpenWindow(System.Action,System.String)">
            <summary>
            Invokes a delegate that causes a new window to open, and return an object representing the new window
            </summary>
            <param name="action">The delegate that should cause a new window to open</param>
            <param name="windowDescription">A description that will identify the window in the log</param>
            <returns>The <see cref="T:TestAutomationEssentials.Selenium.BrowserWindow"/> object that represent the newly opened window</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> or <paramref name="windowDescription"/> are null</exception>
            <exception cref="T:System.TimeoutException">A new window wasn't opened for 60 seconds after the delegate completed</exception>
            <remarks>
            When the current <see cref="T:TestAutomationEssentials.MSTest.ExecutionContext.IIsolationScope"/> ends, the window is automatically closed
            </remarks>
            <example>
            <code>
            var openNewWindowButton = myBrowser.WaitForElement(By.Id("openNewWindowButtonId"), "Open new window button");
            var newWindow = myBrowser.OpenWindow(() => openNewButton.Click(), "New window");
            Assert.AreEqual("New window Title", newWindow.Title);
            </code>
            </example>
        </member>
        <member name="T:TestAutomationEssentials.Selenium.BrowserElement">
            <summary>
            Represents a single DOM element in a browser
            </summary>
            <remarks>
            This class wraps Selenium's <see cref="T:OpenQA.Selenium.IWebElement"/> to provide additional capabilities for logging, automatic waiting and more.
            </remarks>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.#ctor(TestAutomationEssentials.Selenium.BrowserElement,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/> by copying its properties, except of its description from another element
            </summary>
            <param name="otherElement">The existing element to copy its properties from</param>
            <param name="description">The new description to use for the new object</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherElement"/> is null</exception>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.#ctor(TestAutomationEssentials.Selenium.BrowserElement)">
            <summary>
            Copy constructor
            </summary>
            <param name="otherElement">Other object from which to copy the properties into the new object</param>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.#ctor(TestAutomationEssentials.Selenium.ElementsContainer,OpenQA.Selenium.By,System.Func{System.Collections.Generic.IReadOnlyCollection{OpenQA.Selenium.IWebElement},OpenQA.Selenium.IWebElement},System.String)">
            <summary>
            Initializes a new instance of <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/> given its container, a 'By' filter a selector and description
            </summary>
            <param name="container">The container that contains the relevant element. Typically this is a <see cref="T:TestAutomationEssentials.Selenium.Browser"/>, <see cref="T:TestAutomationEssentials.Selenium.BrowserWindow"/>, <see cref="T:TestAutomationEssentials.Selenium.Frame"/> or a containing <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/></param>
            <param name="by">A filter mechanism used to filter the matching elements</param>
            <param name="selector">A delegate that is used to select the sepecific element from the filtered element</param>
            <param name="description">The description of the new element</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null</exception>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.#ctor(TestAutomationEssentials.Selenium.ElementsContainer,OpenQA.Selenium.By,System.String)">
            <summary>
            Initialized a new instance of <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/> given its container, a specific 'By' filter and description
            </summary>
            <param name="container">The container that contains the relevant element. Typically this is a <see cref="T:TestAutomationEssentials.Selenium.Browser"/>, <see cref="T:TestAutomationEssentials.Selenium.BrowserWindow"/>, <see cref="T:TestAutomationEssentials.Selenium.Frame"/> or a containing <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/></param>
            <param name="by">A filter mechanism used to find the element. If multiple elements match the filter, the first one is used</param>
            <param name="description">The description of the new element</param>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "P:TestAutomationEssentials.Selenium.BrowserElement.Text" -->
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.DoubleClick">
            <summary>
            Performs a double-click on the element
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.Hover">
            <summary>
            Hovers the mouse over the element
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.GetParent(System.String)">
            <summary>
            Returns the immediate parent element containing the current element
            </summary>
            <param name="description">The description to give to the parent element</param>
            <returns>A <see cref="T:TestAutomationEssentials.Selenium.BrowserElement"/> that represents the parent element</returns>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.DragAndDrop(TestAutomationEssentials.Selenium.BrowserElement)">
            <summary>
            Drags the current element onto the target element
            </summary>
            <param name="target">The target element to drop the current element onto</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserElement.WaitToDisappear(System.Int32)">
            <summary>
            Waits for the current element to disappear. That is, either become invisible or completely removed from the DOM
            </summary>
            <param name="seconds">Timeout in seconds to wait for the element to disappear</param>
            <exception cref="T:System.TimeoutException">The current element hasn't been disappeared for the specified period</exception>
        </member>
        <member name="T:TestAutomationEssentials.Selenium.BrowserWindow">
            <summary>
            Represents a browser window
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserWindow.#ctor(TestAutomationEssentials.Selenium.Browser,System.String,System.String)">
            <summary>
            Initializes the <see cref="T:TestAutomationEssentials.Selenium.BrowserWindow"/> given the specified browser, window handle, and a description
            </summary>
            <param name="browser">The browser object that this window belongs to</param>
            <param name="windowHandle">The handle of the browser window as returned from <see cref="P:OpenQA.Selenium.IWebDriver.WindowHandles"/> or <see cref="P:OpenQA.Selenium.IWebDriver.CurrentWindowHandle"/></param>
            <param name="description">The description of the window, as you want to appear in the log</param>
        </member>
        <member name="P:TestAutomationEssentials.Selenium.BrowserWindow.Browser">
            <summary>
            Returns the owning browser
            </summary>
        </member>
        <member name="P:TestAutomationEssentials.Selenium.BrowserWindow.Title">
            <summary>
            Returns the current title of the window
            </summary>
        </member>
        <member name="P:TestAutomationEssentials.Selenium.BrowserWindow.Url">
            <summary>
            Gets or sets the current URL of the browser window
            </summary>
            <remarks>
            Setting this property is exactly the same as calling <see cref="M:TestAutomationEssentials.Selenium.BrowserWindow.NavigateToUrl(System.String)"/>
            </remarks>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserWindow.Close">
            <summary>
            Closes the current window
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.BrowserWindow.NavigateToUrl(System.String)">
            <summary>
            Navigates the current browser window to the specified URL
            </summary>
            <param name="url">The URL to navigate to</param>
            <remarks>
            This method records the operation to the log using <see cref="T:TestAutomationEssentials.Common.Logger"/>
            </remarks>
        </member>
        <member name="T:TestAutomationEssentials.Selenium.ElementsContainer">
            <summary>
            Acts as a base class for all objects that can contain DOM elements
            </summary>
        </member>
        <member name="F:TestAutomationEssentials.Selenium.ElementsContainer.DefaultWaitTimeout">
            <summary>
            The default timeout that is used to wait for elements to appear or disappear
            </summary>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.ElementsContainer.#ctor(System.String)">
            <summary>
            Initializes the instance of <see cref="T:TestAutomationEssentials.Selenium.ElementsContainer"/> with the specified description
            </summary>
            <param name="description">A description representing the element in the log</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="description"/> is null</exception>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.ElementsContainer.GetFrame(System.String,System.String)">
            <summary>
            Returns the specified frame which is contained inside the current container
            </summary>
            <param name="frameName">The name of the frame</param>
            <param name="description">A description representing the frame in the log</param>
            <returns>An object representing the specified frame</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null</exception>
            <exception cref="T:System.TimeoutException">The frame wasn't found after <see cref="F:TestAutomationEssentials.Selenium.ElementsContainer.DefaultWaitTimeout"/> seconds</exception>
        </member>
        <member name="M:TestAutomationEssentials.Selenium.ElementsContainer.GetFrame(OpenQA.Selenium.By,System.String)">
            <summary>
            Returns the frame that matches the 'by' criteria which is contained inside the current container
            </summary>
            <param name="by">The criteria that is used to locate the frame element</param>
            <param name="description">A description representing the frame in the log</param>
            <returns>An object representing the specified frame</returns>
            <exception cref="T:System.ArgumentNullException">Any of the arguments is null</exception>
            <exception cref="T:System.TimeoutException">The frame wasn't found after <see cref="F:TestAutomationEssentials.Selenium.ElementsContainer.DefaultWaitTimeout"/> seconds</exception>
            <remarks>If more than 1 frame matches the specified criteria, the first match is returned;</remarks>
        </member>
    </members>
</doc>
